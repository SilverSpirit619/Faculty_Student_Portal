@model FacultyStudentPortal.Web.ViewModels.FacultyDashboardViewModel

@{
    ViewData["Title"] = "Faculty Dashboard";
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12 col-xl-8">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3 class="card-title mb-0">Your Assignments</h3>
                        <a asp-action="CreateAssignment" class="btn btn-primary rounded-pill">
                            <i class="bi bi-plus-circle me-1"></i> Create New Assignment
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    @if (!Model.Assignments.Any())
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i> You haven't created any assignments yet.
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <div class="btn-group" role="group" aria-label="Status filter">
                                    <button type="button" class="btn btn-outline-secondary btn-sm rounded-pill active" data-status="all">
                                        <i class="bi bi-funnel me-1"></i> All
                                    </button>
                                    <button type="button" class="btn btn-outline-success btn-sm rounded-pill" data-status="active">
                                        <i class="bi bi-check-circle me-1"></i> Active
                                    </button>
                                    <button type="button" class="btn btn-outline-danger btn-sm rounded-pill" data-status="expired">
                                        <i class="bi bi-x-circle me-1"></i> Expired
                                    </button>
                                </div>
                            </div>
                            <table class="table table-hover align-middle" id="assignmentsTable">
                                <thead>
                                    <tr>
                                        <th>Title</th>
                                        <th>Due Date</th>
                                        <th>Time Remaining</th>
                                        <th>Status</th>
                                        <th>Submissions</th>
                                        <th class="text-end">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var assignment in Model.Assignments)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="bi bi-file-text me-2"></i>
                                                    <span>@assignment.Title</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="bi bi-calendar me-2"></i>
                                                    <span>@assignment.DueDate.ToLocalTime().ToString("f")</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div data-timer="@assignment.DueDate.ToString("o")"></div>
                                            </td>
                                            <td>
                                                @if (assignment.DueDate < DateTime.UtcNow)
                                                {
                                                    <span class="badge rounded-pill bg-danger" data-status="expired">
                                                        <i class="bi bi-x-circle me-1"></i> Expired
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge rounded-pill bg-success" data-status="active">
                                                        <i class="bi bi-check-circle me-1"></i> Active
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="bi bi-people me-2"></i>
                                                    @{
                                                        var submissions = Model.Submissions.Count(s => s.AssignmentId == assignment.Id);
                                                        var gradedSubmissions = Model.Submissions.Count(s => s.AssignmentId == assignment.Id && s.IsGraded);
                                                        var totalStudents = Model.Students.Count();
                                                    }
                                                    <span class="badge rounded-pill bg-primary">@submissions / @totalStudents</span>
                                                    @if (gradedSubmissions > 0)
                                                    {
                                                        <span class="badge rounded-pill bg-success ms-2" title="Graded submissions">
                                                            <i class="bi bi-check2"></i> @gradedSubmissions
                                                        </span>
                                                    }
                                                </div>
                                            </td>
                                            <td class="text-end">
                                                <a asp-action="Assignment" asp-route-id="@assignment.Id" 
                                                   class="btn btn-primary btn-sm rounded-pill">
                                                    <i class="bi bi-eye me-1"></i> View
                                                </a>
                                                <button class="btn btn-danger btn-sm rounded-pill" onclick="deleteAssignment(@assignment.Id)">
                                                    <i class="bi bi-trash me-1"></i> Delete
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-12 col-xl-4">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h3 class="card-title mb-0">Students</h3>
                </div>
                <div class="card-body">
                    @if (!Model.Students.Any())
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i> No students enrolled yet.
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover align-middle" id="studentsTable">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Submissions</th>
                                        <th class="text-end">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var student in Model.Students)
                                    {
                                        var studentSubmissions = Model.Submissions.Count(s => s.StudentId == student.Id);
                                        var gradedSubmissions = Model.Submissions.Count(s => s.StudentId == student.Id && s.IsGraded);
                                        
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="bi bi-person me-2"></i>
                                                    <span>@student.FirstName @student.LastName</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <span class="badge rounded-pill bg-primary me-2">@studentSubmissions</span>
                                                    @if (gradedSubmissions > 0)
                                                    {
                                                        <span class="badge rounded-pill bg-success" title="Graded submissions">
                                                            <i class="bi bi-check2"></i> @gradedSubmissions
                                                        </span>
                                                    }
                                                </div>
                                            </td>
                                            <td class="text-end">
                                                <button class="btn btn-primary btn-sm rounded-pill" onclick="viewStudentProgress(@student.Id)">
                                                    <i class="bi bi-graph-up me-1"></i> Progress
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <style>
        .card {
            border: none;
            margin-bottom: 1.5rem;
        }
        .card-header {
            border-bottom: none;
            background: white;
        }
        .table > :not(caption) > * > * {
            padding: 1rem 0.75rem;
        }
        .badge {
            font-weight: 500;
            padding: 0.5em 1em;
        }
        .btn-sm {
            padding: 0.4rem 1rem;
            font-size: 0.875rem;
        }
        .table > tbody > tr > td {
            vertical-align: middle;
        }
        .btn-group .btn {
            margin: 0 0.25rem;
        }
        .btn-group .btn:first-child {
            margin-left: 0;
        }
        .btn-group .btn:last-child {
            margin-right: 0;
        }
        .btn-group .btn.active {
            background-color: #6c757d;
            color: white;
        }
    </style>
    <script>
        $(document).ready(function () {
            // Initialize assignments table
            var assignmentsTable = $('#assignmentsTable').DataTable({
                "pageLength": 10,
                "ordering": true,
                "info": true,
                "searching": true,
                "order": [[1, "asc"]],
                "language": {
                    "search": "",
                    "searchPlaceholder": "Search assignments..."
                }
            });

            // Filter button click handler
            $('.btn-group .btn').on('click', function() {
                var status = $(this).data('status');
                
                // Update active state of buttons
                $('.btn-group .btn').removeClass('active');
                $(this).addClass('active');
                
                // Clear existing search and apply new filter
                assignmentsTable.search('').columns().search('').draw();
                
                if (status !== 'all') {
                    // Filter the table based on the status data attribute
                    assignmentsTable.column(3).search(status).draw();
                }
            });

            // Initialize students table
            $('#studentsTable').DataTable({
                "pageLength": 10,
                "ordering": true,
                "info": true,
                "searching": true,
                "language": {
                    "search": "",
                    "searchPlaceholder": "Search students..."
                }
            });
        });

        async function deleteAssignment(id) {
            if (!confirm('Are you sure you want to delete this assignment? This action cannot be undone.')) {
                return;
            }

            try {
                const response = await ajaxRequest('/Faculty/DeleteAssignment/' + id, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.success) {
                    showToast('Assignment deleted successfully', 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast(response.error || 'Failed to delete assignment', 'danger');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('An error occurred while deleting the assignment', 'danger');
            }
        }

        async function viewStudentProgress(studentId) {
            try {
                const response = await ajaxRequest('/Faculty/GetStudentProgress/' + studentId);
                // Implement progress view logic here
                console.log(response);
            } catch (error) {
                console.error('Error:', error);
                showToast('An error occurred while fetching student progress', 'danger');
            }
        }
    </script>
} 