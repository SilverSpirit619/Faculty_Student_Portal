@model FacultyStudentPortal.Web.ViewModels.FacultyAssignmentViewModel

@{
    ViewData["Title"] = "Assignment Details";
}

<div class="container mt-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-action="Dashboard">Dashboard</a></li>
            <li class="breadcrumb-item active">@Model.Assignment.Title</li>
        </ol>
    </nav>
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">@Model.Assignment.Title</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    <p class="text-muted mb-3">
                        <i class="bi bi-calendar-event"></i> Due: @Model.Assignment.GetFormattedDueDate()
                        <span class="badge @(Model.Assignment.IsExpired ? "bg-danger" : "bg-success")">
                            @(Model.Assignment.IsExpired ? "Overdue" : "Active")
                        </span>
                    </p>
                    <div class="mb-4">
                        <h5><i class="bi bi-file-text"></i> Description</h5>
                        <p class="mb-4">@Model.Assignment.Description</p>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.Assignment.FileUrl))
                    {
                        <div class="mb-4">
                            <h5><i class="bi bi-file-earmark"></i> Assignment File</h5>
                            <a href="@Model.Assignment.FileUrl" class="btn btn-outline-primary" target="_blank">
                                <i class="bi bi-download"></i> Download Assignment File
                            </a>
                        </div>
                    }
                </div>
                <div class="col-md-4">
                    <div class="card bg-light">
                        <div class="card-body">
                            <h5>Status</h5>
                            <p class="mb-0">
                                <span class="badge @Model.GetStatusBadgeClass()">
                                    @Model.GetStatusText()
                                </span>
                            </p>
                            <hr />
                            <h5>Submissions</h5>
                            <p class="mb-0">Total: @Model.Submissions.Count()</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <h3>Submissions</h3>
            @if (!Model.Submissions.Any())
            {
                <div class="alert alert-info">
                    No submissions yet.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Student Name</th>
                                <th>Submitted At</th>
                                <th>Status</th>
                                <th>File</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var submission in Model.Submissions)
                            {
                                <tr data-submission-id="@submission.Id">
                                    <td>
                                        <div>
                                            <strong>@submission.StudentName</strong>
                                            <div class="text-muted small">@submission.StudentEmail</div>
                                        </div>
                                    </td>
                                    <td>@submission.SubmittedAt.ToLocalTime().ToString("f")</td>
                                    <td>
                                        @if (submission.IsLate)
                                        {
                                            <span class="badge bg-warning">Late</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">On Time</span>
                                        }
                                    </td>
                                    <td>
                                        <a href="@submission.SubmissionFileUrl" class="btn btn-sm btn-outline-primary" target="_blank">
                                            <i class="bi bi-download"></i> Download
                                        </a>
                                    </td>
                                    <td>
                                        @if (!submission.IsGraded)
                                        {
                                            <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#gradeModal" 
                                                    onclick="prepareGradeForm(@submission.Id, @submission.StudentId)">
                                                Grade
                                            </button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-info btn-sm" onclick="viewGrades(@submission.Id)">
                                                View Grades
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Grade Submission Modal -->
<div class="modal fade" id="gradeModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Grade Submission</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="gradeSubmissionForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="SubmissionId" value="" />
                    <input type="hidden" name="AssignmentId" value="@Model.Assignment.Id" />
                    <input type="hidden" name="StudentId" value="" />

                    <div class="mb-3">
                        <label class="form-label">Assessment Criteria</label>
                        @foreach (var criteria in Model.Assignment.AssessmentCriteria)
                        {
                            <div class="card mb-2 criteria-row">
                                <div class="card-body">
                                    <input type="hidden" name="CriteriaId" value="@criteria.Id" />
                                    <input type="hidden" name="CriteriaName" value="@criteria.CriteriaName" />
                                    <input type="hidden" name="MaxScore" value="@criteria.MaxScore" />
                                    
                                    <h6>@criteria.CriteriaName</h6>
                                    <p class="text-muted small">@criteria.Description</p>
                                    
                                    <div class="row align-items-center">
                                        <div class="col-md-6">
                                            <div class="input-group">
                                                <input type="number" class="form-control" name="Score" 
                                                       min="0" max="@criteria.MaxScore" required
                                                       placeholder="Enter score (max: @criteria.MaxScore)" />
                                                <span class="input-group-text">/ @criteria.MaxScore</span>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <input type="text" class="form-control" name="Remarks" 
                                                   placeholder="Optional remarks" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="comments" class="form-label required">Comments</label>
                        <textarea class="form-control" id="comments" name="Comments" rows="3" required></textarea>
                        <span class="invalid-feedback">Please provide comments for the grade.</span>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="submitGrades()">Submit Grades</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .badge {
            font-size: 0.875rem;
            padding: 0.5em 0.8em;
        }
        .card {
            border: none;
            margin-bottom: 1.5rem;
        }
        .card-header {
            border-bottom: none;
        }
        .timer-container {
            padding: 1rem;
            border-radius: 0.375rem;
            border: 1px solid rgba(0, 0, 0, 0.1);
            background: transparent;
        }
        .timer-container i {
            margin-right: 0.5rem;
            color: #6c757d;
        }
    </style>
    <script>
        function updateTimeRemaining() {
            var dueDate = new Date('@Model.Assignment.DueDate.ToString("O")');
            var now = new Date();
            if (now > dueDate) {
                $('#timeRemaining').html('This assignment has expired.');
                return;
            }
            var diff = dueDate - now;
            var days = Math.floor(diff / (1000 * 60 * 60 * 24));
            var hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
            $('#timeRemaining').html('Time remaining: ' + days + ' days ' + hours + ' hours ' + minutes + ' minutes');
        }
        $(document).ready(function() {
            updateTimeRemaining();
            setInterval(updateTimeRemaining, 60000);
        });

        function prepareGradeForm(submissionId, studentId) {
            document.querySelector('input[name="SubmissionId"]').value = submissionId;
            document.querySelector('input[name="StudentId"]').value = studentId;
        }

        function submitGrades() {
            const form = document.getElementById('gradeSubmissionForm');
            const formData = new FormData(form);
            
            // Convert form data to the expected model structure
            const grades = [];
            const criteriaRows = document.querySelectorAll('.criteria-row');
            
            criteriaRows.forEach(row => {
                grades.push({
                    criteriaId: parseInt(row.querySelector('input[name="CriteriaId"]').value),
                    criteriaName: row.querySelector('input[name="CriteriaName"]').value,
                    score: parseFloat(row.querySelector('input[name="Score"]').value),
                    maxScore: parseFloat(row.querySelector('input[name="MaxScore"]').value),
                    remarks: row.querySelector('input[name="Remarks"]').value
                });
            });

            const data = {
                submissionId: parseInt(formData.get('SubmissionId')),
                assignmentId: parseInt(formData.get('AssignmentId')),
                studentId: parseInt(formData.get('StudentId')),
                grades: grades,
                comments: formData.get('Comments')
            };

            // Get the anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            // Submit the grades
            fetch('/Faculty/GradeSubmission', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.message) {
                    // Success
                    location.reload();
                } else {
                    // Error
                    alert(result.error || 'An error occurred while submitting grades.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while submitting grades.');
            });
        }

        function viewGrades(submissionId) {
            // Implement view grades functionality
            alert('View grades functionality to be implemented');
        }
    </script>
} 